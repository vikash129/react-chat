{"version":3,"sources":["MyComp/TheirMess.jsx","MyComp/MyMess.jsx","MyComp/ChatFeed.jsx","MyComp/LoginPage.jsx","App.js","reportWebVitals.js","index.js"],"names":["TheirMess","message","lastMessage","isFirstMessageByUser","sender","username","className","style","backgroundImage","avatar","attachments","length","src","file","alt","marginLeft","float","text","MyMess","width","height","marginRight","flex","ChatFeed","props","chats","activeChat","userName","messages","chat","renderReadReceipts","isMyMessage","console","log","people","map","person","index","last_read","id","renderMessages","keys","Object","key","lastMessageKey","isMyMesssage","title","LoginPage","projectID","useState","setUsername","pwd","setPwd","handleSubmit","e","a","preventDefault","authObject","axios","get","headers","localStorage","setItem","JSON","stringify","window","location","reload","alert","onSubmit","htmlFor","type","name","aria-describedby","placeholder","onChange","target","value","App","LoginData","parse","getItem","password","userSecret","onConnect","creds","renderChatFeed","chatAppState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2ea837cb.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const TheirMess = ({ message, lastMessage }) => {\r\n  // console.log('lastMessage',lastMessage)\r\n\r\n  const isFirstMessageByUser =\r\n    !lastMessage || lastMessage.sender.username !== message.sender.username;\r\n\r\n  // console.log('isFirstMessageByUser',isFirstMessageByUser)\r\n\r\n  return (\r\n    <div className=\"chat-pannel\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-3\">\r\n          <div className=\"chat-bubbul chat-bubble-left\">\r\n            \r\n            {isFirstMessageByUser && (\r\n              <div\r\n                className=\"message-avatar\"\r\n                style={{ backgroundImage: `url(${message?.sender?.avatar})` }}\r\n              ></div>\r\n            )}\r\n\r\n            {message?.attachments?.length > 0 ? (\r\n              <img\r\n                src={message.attachments[0].file}\r\n                alt=\"message-attadchment\"\r\n                className=\"message-image \"\r\n                style={{ marginLeft: isFirstMessageByUser ? \"4px\" : \"48px\" }}\r\n              />\r\n            ) : (\r\n              <ul\r\n                className=\"message\"\r\n                style={{\r\n                  float: \"left\",\r\n                  marginLeft: isFirstMessageByUser ? \"4px\" : \"48px\",\r\n                }}\r\n              >\r\n                <p className=\"message-text\"> {message.text}</p>\r\n              </ul>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const MyMess = ({ message }) => {\r\n  if (message?.attachments?.length > 0) {\r\n    return (\r\n      <img\r\n        src={message.attachments[0].file}\r\n        alt=\"message-attachment\"\r\n        className=\"message-image img-rounded img-responsive embed-responsive embed-responsive-4by3 embed-responsive-item\"\r\n        style={{ float: \"right\", width: \"10%\", height: \"10%\" }}\r\n      />\r\n    );\r\n  }\r\n  return (\r\n    <div\r\n      className=\"message row no-gutters\"\r\n      style={{ float: \"right\", marginRight: \"18px\", flex: \"0 0 75\" }}\r\n    >\r\n      <div className=\"col-md-3 offset-md-9\">\r\n        <div className=\"chat-bubble right\">\r\n          <p className=\"message-text\"> {message.text}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport { MessageForm } from \"./MessageForm\";\r\nimport { TheirMess } from \"./TheirMess\";\r\nimport { MyMess } from \"./MyMess\";\r\n\r\nconst ChatFeed = (props) => {\r\n  const { chats, activeChat, userName, messages } = props;\r\n\r\n  const chat = chats && chats[activeChat];\r\n\r\n  const renderReadReceipts = (message, isMyMessage) => {\r\n\r\n    console.log(message.sender.avatar)\r\n\r\n    return chat.people.map(\r\n      (person, index) =>\r\n        person.last_read === message.id && (\r\n          <div\r\n          className=\"profile-image\"\r\n            key={`read_${index}`}\r\n            style={{\r\n              float: isMyMessage ? \"right\" : \"left\",\r\n              backgroundImage: `url(${message?.sender?.avatar}`,\r\n            }}\r\n          />\r\n        )\r\n    );\r\n  };\r\n\r\n  const renderMessages = () => {\r\n    const keys = Object.keys(messages);\r\n\r\n    return keys.map((key, index) => {\r\n      const message = messages[key];\r\n\r\n      const lastMessageKey = index === 0 ? null : keys[index - 1];\r\n      const isMyMesssage = userName === message.sender.username;\r\n\r\n      return (\r\n        <div key={`msg_${index}`} style={{ width: \"100%\" }}>\r\n\r\n            {isMyMesssage ? (\r\n              <MyMess message={message} />\r\n            ) : (\r\n              <TheirMess\r\n                message={message}\r\n                lastMessage={messages[lastMessageKey]}\r\n              />\r\n            )}\r\n\r\n          <div\r\n            className=\"read-receips\"\r\n            style={{\r\n              marginRight: isMyMesssage ? \"50px\" : \"0px\",\r\n              marginLeft: isMyMesssage ? \"0px\" : \"68px\",\r\n            }}\r\n          >\r\n            {renderReadReceipts(message, isMyMesssage)}\r\n\r\n          </div>\r\n\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  renderMessages();\r\n\r\n  if (!chat) return \"Loading...\";\r\n\r\n  return (\r\n    <div className=\"chat-feed\">\r\n\r\n        <div className=\"chat-header\">\r\n          {chat.title} <br />\r\n          {userName}\r\n        </div>\r\n\r\n        <div className=\"message-date-text\" >3:20PM, May 10th, 2021</div>\r\n\r\n        <div className=\"chat-content\">{renderMessages()}</div>\r\n\r\n\r\n      {/* <div style={{ height: \"100px\" }}>\r\n        <div className=\"message-form-container\">\r\n          <MessageForm {...props} chatId={activeChat} />\r\n        </div>\r\n        \r\n      </div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatFeed;\r\n","import React ,{useState} from 'react'\r\nimport axios from 'axios'\r\n\r\nexport const LoginPage = ( projectID) => {\r\n\r\n    const [username, setUsername] = useState('')\r\n    const [pwd, setPwd] = useState('')\r\n\r\n    const handleSubmit  = async (e) => {\r\n\r\n        e.preventDefault()\r\n\r\n        const authObject = {'Project-ID' : '759e5fc0-c268-4e04-ba44-59104a069a9b', 'User-Name' : username , 'User-Secret' : pwd}\r\n        \r\n        try {\r\n            //if works then logged in\r\n            await axios.get('https://api.chatengine.io/chats' , {headers : authObject})\r\n\r\n            localStorage.setItem('LoginData' , JSON.stringify({ 'username' : username ,'password': pwd}) )\r\n\r\n            window.location.reload()\r\n        }\r\n        catch (error){\r\n            alert('Wrong Password or UserName ... Not connected !!!!')\r\n            console.log(error)\r\n        }\r\n\r\n    } \r\n\r\n    return (\r\n        <div className = 'form-group'>\r\n            <i className=\"fas fa-h1\">React-AllChat.Com</i>\r\n\r\n            <form  onSubmit = {handleSubmit}>\r\n\r\n              <label htmlFor=\"username\">USER NAME : </label>\r\n              <input type=\"text\" className=\"form-control\" name=\"\" id=\"username\" aria-describedby=\"username\" placeholder=\"Enter Username :\" onChange = { (e) => setUsername(e.target.value)} />\r\n\r\n              <label htmlFor=\"pwd\">Secret Key :\r\n              <input type=\"password\" className=\"form-control\" name=\"\" id=\"pwd\" placeholder=\"Enter Password\" onChange = { (e) => setPwd(e.target.value)}/>\r\n              </label>\r\n              <button type=\"submit\" className = 'btn btn-primary btn-sm my-2'>\r\n                  Start Chatting\r\n              </button>\r\n              </form>\r\n        </div>\r\n    )\r\n}\r\n","// import logo from './logo.svg';\nimport { ChatEngine } from 'react-chat-engine'\nimport React from 'react'\nimport ChatFeed from './MyComp/ChatFeed'\nimport { LoginPage } from './MyComp/LoginPage'\n\nimport './App.css'\n\nexport function App() {\n\n  const projectID = '759e5fc0-c268-4e04-ba44-59104a069a9b'\n\n  const LoginData = JSON.parse(localStorage.getItem('LoginData'))\n\n\n  if (LoginData) {\n\n    const { username, password } = LoginData\n\n    return (\n      <ChatEngine\n        height='100vh'\n        userName={username}\n        userSecret={password}\n        projectID={projectID}\n        onConnect={(creds) => console.log('Connected successfullt .....')}\n        //       // onFailAuth={(props) => console.log(props)}\n        // \t\t\t// onNewChat={(chat) => console.log(chat)}\n        // \t\t\t// onEditChat={(chat) => console.log(chat)}\n        // \t\t\t// onDeleteChat={(chat) => console.log(chat)}\n        // \t\t\t// onNewMessage={(chatId, message) => console.log(chatId, message)}\n        // \t\t\t// onEditMessage={(chatId, message) => console.log(chatId, message)}\n        // \t\t\t// onDeleteMessage={(chatId, message) => console.log(chatId, message)}\n\n        renderChatFeed={(chatAppState) => <ChatFeed {...chatAppState} />}\n      //       // renderNewChatForm={(creds) =>  <ChatFeed  {...creds}\n      />\n    )\n  }\n  else {\n    return <LoginPage projectID={projectID} />\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}